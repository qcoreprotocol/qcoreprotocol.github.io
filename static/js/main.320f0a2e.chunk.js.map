{"version":3,"sources":["App.js","qtum-raffle.svg","registerServiceWorker.js","index.js"],"names":["refreshIntervalId","address","qtumLightApi","QtumLightApi","DataTypes","ADDRESS","ADDRESS_ARRAY","ONE_QTUM","theme","createMuiTheme","palette","primary","main","secondary","App","state","owner","players","balance","hasError","message","numberOfRaffle","contractLoaded","loading","selectedTab","buyPricePerRaffle","buyAmount","buyPrice","walletInitialized","loadWallet","a","window","postMessage","type","isQtumLightInstalled","console","log","getCurrentAddress","account","setState","snackbarOpen","snackbarMessage","loadData","endTime","Date","setHours","startCountdownTimer","getTime","qrypto","rpcProvider","rawCall","then","res","loadingMessage","raffle","Contract","network","call","playersArray","contractAddress","queryContractInfo","contractInfo","error","handleTabChange","event","value","addRaffles","number","parseInt","getAddressAbv","substr","length","handleBuyAmountChange","amount","replace","onBuySubmit","preventDefault","qtum","send","tx","queryConfirmation","onPickWinnerSubmit","addPaddingZeroIfNeeded","diffTime","duration","moment","clearInterval","setInterval","hours","minutes","seconds","countdownTimer","handleSnackbarClose","reason","this","className","onChange","label","required","ev","target","margin","variant","color","onClick","id","url","href","position","src","logo","alt","open","keepMounted","aria-labelledby","aria-describedby","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","ContentProps","action","aria-label","slice","map","player","index","renderPlayers","renderBuy","renderContractInfo","renderAppBar","renderSummary","renderBody","renderLoading","renderSnackbar","renderFooter","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.320f0a2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Card from '@material-ui/core/Card';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport AlarmIcon from '@material-ui/icons/Alarm';\nimport LoyaltyIcon from '@material-ui/icons/Loyalty';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { QtumLightApi } from 'qtum-light-js';\nimport moment from 'moment';\n\nimport logo from './qtum-raffle.svg';\nimport './App.css';\n\nconst address = 'adcbf0ac6a351e5f0b86eec5a4df288e62abacc0';\nconst qtumLightApi = new QtumLightApi();\n\nconst { ADDRESS, ADDRESS_ARRAY } = qtumLightApi.DataTypes;\n\nconst ONE_QTUM = 100000000;\n\nlet refreshIntervalId;\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#343a40',\n    },\n    secondary: {\n      main: '#e6ae49',\n    }\n  },\n});\n\nclass App extends Component {\n  state = {\n    owner: '',\n    players: [],\n    balance: '',\n    hasError: false,\n    message: '',\n    numberOfRaffle: '',\n    contractLoaded: false,\n    loading: false,\n    selectedTab: 0,\n    buyPricePerRaffle: 1,\n    buyAmount: 1,\n    buyPrice: 1,\n    walletInitialized: false\n  };\n\n  componentDidMount() {\n    this.loadWallet();\n  }\n\n  loadWallet = async () => {\n    window.postMessage({ message: { type: 'CONNECT_QRYPTO' }}, '*')\n\n    const isQtumLightInstalled = await qtumLightApi.isQtumLightInstalled();\n    if (isQtumLightInstalled) {\n      console.log('Qtum Light is installed!');\n      const account = await qtumLightApi.getCurrentAddress();\n      if (!account) {\n        this.setState({ walletInitialized: true, snackbarOpen: true, snackbarMessage: 'Please sign in Qtum Light Wallet and refresh the page!'});\n        return;\n      }\n      this.setState({account, walletInitialized: true});\n      this.loadData();\n      const endTime = new Date();\n      endTime.setHours(23, 59, 59, 999);\n      this.startCountdownTimer(endTime.getTime());\n    } else {\n      console.log('Qtum Light is not installed!');\n      this.setState({ walletInitialized: true, snackbarOpen: true, snackbarMessage: 'Please install Qtum Light Wallet to use this app!' });\n    }\n  };\n\n  loadData = async () => {\n    // callcontract\nconst contractAddress = 'adcbf0ac6a351e5f0b86eec5a4df288e62abacc0';\nconst data = '06fdde03';\nwindow.qrypto.rpcProvider.rawCall(\n  'callcontract',\n  [contractAddress, data]\n).then((res) => console.log(res));\n\n    this.setState({ loading: true, loadingMessage: 'Retrieving the raffle info from Qtum blockchain, please wait...' });\n    try {\n      const raffle = qtumLightApi.Contract(address);\n      const network = 'TESTNET';\n      const owner = await raffle.call('owner', null, null, [ADDRESS]);\n      const playersArray = await raffle.call('getPlayers', null, null, [ADDRESS_ARRAY]);\n      const players = playersArray[0];\n      const contractAddress = address;\n      const contractInfo = await qtumLightApi.queryContractInfo(address);\n      const balance = contractInfo.balance / ONE_QTUM;\n      this.setState({ loading: false, loadingMessage: '', raffle, owner, players, contractAddress, balance, network, contractLoaded: true });\n    } catch(e) {\n      console.error(e);\n      this.setState({ loading: false, snackbarOpen: true, snackbarMessage: 'Something went wrong, please try again.' });\n    }\n  };\n\n  handleTabChange = (event, value) => {\n    this.setState({ selectedTab: value });\n  };\n\n  addRaffles = (number) => {\n    let { buyAmount } = this.state;\n    buyAmount = parseInt(buyAmount, 10) + number;\n    const buyPrice = buyAmount * this.state.buyPricePerRaffle;\n    this.setState({\n      buyAmount,\n      buyPrice\n    });\n  };\n\n  renderBuy() {\n    const { selectedTab, balance, owner } = this.state;\n    return (\n      <Card className=\"card big-card\">\n      <Tabs value={selectedTab} onChange={this.handleTabChange}>\n        <Tab label=\"Buy\" />\n        <Tab label=\"Pick winner\" />\n      </Tabs>\n        {selectedTab === 0 && <div>\n          <p>* The price 1 QTUM per raffle.</p>\n          <div className=\"buy-box\">\n            <div className=\"buy-icon\">\n              <LoyaltyIcon/>\n            </div>\n            <input\n              required\n              className=\"buy-amount\"\n              value={this.state.buyAmount}\n              onChange={(ev) => this.handleBuyAmountChange(ev.target.value) }\n              type=\"number\"\n              margin=\"normal\"/>\n              <div className=\"buy-price right\"><div>@ {this.state.buyPrice} QTUM</div></div>\n          </div>\n\n          <div className=\"keys-container\">\n            <Button\n              className=\"key-button\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={() => this.addRaffles(1)}\n              >\n              +1 Raffle\n            </Button>\n            <Button\n              className=\"key-button\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={() => this.addRaffles(2)}\n              >\n              +2 Raffles\n            </Button>\n            <Button\n              className=\"key-button\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={() => this.addRaffles(5)}\n              >\n              +5\n            </Button>\n            <Button\n              className=\"key-button\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={() => this.addRaffles(10)}\n              >\n              +10\n            </Button>\n            <Button\n              className=\"key-button\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              onClick={() => this.addRaffles(100)}\n              >\n              +100\n            </Button>\n          </div>\n            <Button\n              id=\"buy-button\"\n              variant=\"raised\"\n              color=\"primary\"\n              onClick={this.onBuySubmit}\n              >\n              Buy\n            </Button>\n        </div>}\n        {selectedTab === 1 && <div>\n          <p>* Only the owner can pick a winner.</p>\n          <div className=\"round-info-container\">\n            <div className=\"round-info\"><span>Balance</span><span>{balance} QTUM</span></div>\n            <div className=\"round-info\"><span>Owner account</span><span>{owner}</span></div>\n          </div>\n          <Button\n              id=\"claim-button\"\n              variant=\"raised\"\n              color=\"primary\"\n              onClick={this.onPickWinnerSubmit}\n              >\n              Pick Winner\n          </Button>\n        </div>}\n      </Card>\n    );\n  }\n\n  getAddressAbv = (address) => {\n    if (address) {\n      return address.substr(0, 5) + '...' + address.substr(address.length-4, 4);\n    } else {\n      return '';\n    }\n  };\n\n  renderContractInfo() {\n    const { contractAddress, balance } = this.state;\n    const url = `//testnet.qtum.info/contract/${contractAddress}`;\n    return (\n      <Card className=\"card small-card\">\n        <div>\n          <div className=\"card-title\">Smart Contract</div>\n          <hr className=\"card-title-divider\"/>\n          <div>Raffle will drain in:</div>\n          <p className=\"round-countdown-timer\">{this.state.countdownTimer} </p>\n          <hr/>\n          <div className=\"round-info\"><span>Total QTUM</span><span>{balance} QTUM</span></div>\n          <div className=\"round-info\"><span>Contract Address</span><a href={url} target=\"_blank\" className=\"contract-link\">{this.getAddressAbv(contractAddress)}</a></div>\n          <div className=\"round-info\"><span>Source Code</span><a href=\"https://github.com/QtumLightProject/qtum-raffle\" target=\"_blank\" className=\"contract-link\">GitHub | Qtum Raffle</a></div>\n        </div>\n      </Card>\n    );\n  }\n\n  handleBuyAmountChange = (amount) => {\n    const buyAmount = amount.replace(/^0+(?!\\.|$)/, '').replace(/[^0-9 .]+/g,'').replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1\");\n    const buyPrice = buyAmount * this.state.buyPricePerRaffle;\n    this.setState({\n      buyAmount,\n      buyPrice\n    });\n  };\n\n  onBuySubmit = async event => {\n    event.preventDefault();\n    const { buyPrice, raffle } = this.state;\n    this.setState({snackbarOpen: true, snackbarMessage: 'Please confirm the transaction in the Qtum Light Wallet to complete the purchase.'});\n    try {\n      const qtum = buyPrice * ONE_QTUM;\n      const tx = await raffle.send('buy', null, null, qtum, 0.0000004, 2500000);\n      this.setState({snackbarOpen: false, loading: true, loadingMessage: 'Writing to the blockchain, please wait...'});\n      await raffle.queryConfirmation(tx);\n      this.setState({loading: false, snackbarOpen: true, snackbarMessage: 'Purchased successfully, good luck!'});\n      this.loadData();\n    } catch(e) {\n      console.error(e);\n      this.setState({loading: false, snackbarOpen: true, snackbarMessage: 'Transaction has been cancelled, please try again.'});\n    }\n  };\n\n  onPickWinnerSubmit = async event => {\n    event.preventDefault();\n    const { raffle, balance } = this.state;\n\n    if (balance === 0 || balance === '0') {\n      this.setState({snackbarOpen: true, snackbarMessage: 'No QTUM in the contract!'});\n      return;\n    }\n    this.setState({snackbarOpen: true, snackbarMessage: 'Please confirm the transaction in the Qtum Light Wallet to complete the operation.'});\n\n    try {\n      const tx = await raffle.send('pickWinner');\n      this.setState({snackbarOpen: false, loading: true, loadingMessage: 'Writing to the blockchain, please wait...'});\n      await raffle.queryConfirmation(tx);\n      this.setState({loading: false, snackbarOpen: true, snackbarMessage: 'Picked owner successfully! All Qtum has transferred to the winner!'});\n      this.loadData();\n    } catch(e) {\n      console.error(e);\n      this.setState({loading: false, snackbarOpen: true, snackbarMessage: 'Something went wrong! Make sure you are the owner!'});\n    }\n  };\n\n  renderAppBar() {\n    const balance = this.state.balance || 0;\n    return (\n      <AppBar position=\"sticky\">\n        <Toolbar>\n          <div className=\"tool-bar\">\n            <Typography variant=\"title\" color=\"inherit\">\n              <div className=\"trademark\">QTUM RAFFLE™</div>\n            </Typography>\n            <div className=\"appbar-info\">\n              <AlarmIcon /> <div>{this.state.countdownTimer}</div>\n              <LoyaltyIcon /> <div>{balance}</div>\n            </div>\n          </div>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n\n  addPaddingZeroIfNeeded = (number) => {\n    if (number === 0) return '00';\n    return number < 10 && number > 0 ? '0' + number : number;\n  };\n\n  startCountdownTimer = (endTime) => {\n    if (this.state.endTime === endTime) {\n      return;\n    }\n    const currentTime = (new Date()).getTime();\n    const diffTime = endTime - currentTime;\n    let duration = moment.duration(diffTime, 'milliseconds');\n    const interval = 1000;\n\n    if (refreshIntervalId) {\n      clearInterval(refreshIntervalId);\n    }\n    refreshIntervalId = setInterval(() => {\n      duration = moment.duration(duration - interval, 'milliseconds');\n      const hours = this.addPaddingZeroIfNeeded(duration.hours());\n      const minutes = this.addPaddingZeroIfNeeded(duration.minutes());\n      const seconds = this.addPaddingZeroIfNeeded(duration.seconds());\n      const countdownTimer = `${hours} : ${minutes} : ${seconds}`;\n        this.setState({countdownTimer});\n      }, interval);\n    this.setState( {endTime} );\n  };\n\n  renderSummary() {\n    const { balance } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"total-qtum\">\n          <img src={logo} alt=\"Qtum Raffle\"/>\n          <div>{ balance } QTUM</div>\n        </div>\n        <div className=\"countdown-timer\">{this.state.countdownTimer} </div>\n      </div>\n    );\n  }\n\n  renderLoading() {\n    return (\n      <Dialog\n        open={this.state.loading}\n        keepMounted\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\">\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {this.state.loadingMessage}\n          </DialogContentText>\n        </DialogContent>\n        <LinearProgress />\n      </Dialog>\n    );\n  }\n\n  handleSnackbarClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    this.setState({ snackbarOpen: false });\n  };\n\n  renderSnackbar() {\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n        open={this.state.snackbarOpen}\n        autoHideDuration={6000}\n        onClose={this.handleSnackbarClose}\n        ContentProps={{\n          'aria-describedby': 'message-id',\n        }}\n        message={<span id=\"message-id\">{this.state.snackbarMessage}</span>}\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"Close\"\n            color=\"inherit\"\n            onClick={this.handleSnackbarClose}\n          >\n            <CloseIcon />\n          </IconButton>,\n        ]}\n      />\n    );\n  }\n\n  renderFooter() {\n    return (\n      <footer>\n        <div className=\"footer-container\">\n          <p>&copy; 2018 QTUM RAFFLE™ | Please install the <a href=\"https://github.com/QtumLightProject/qtum-light-wallet\" target=\"_blank\"> Qtum Light Wallet</a> to play this game | Contact: appbery.digital@gmail.com </p>\n        </div>\n      </footer>\n    );\n  }\n\n  renderPlayers() {\n    let { players } = this.state;\n    if (players && players.length > 0) {\n      if (players.length > 4) {\n        players = players.slice(0, 4);\n      }\n      return (\n        <Card className=\"card small-card\">\n          <div className=\"card-title\">Recent Players</div>\n          <hr className=\"card-title-divider\"/>\n          <Table>\n            <TableBody>\n              {players.map((player, index) => {\n                return (\n                  <TableRow key={index}>\n                    <TableCell className=\"table-cell\">{player}</TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </Card>)\n    } else {\n      return (\n        <Card className=\"card small-card\">\n          <div className=\"card-title\">Recent Players</div>\n          <hr className=\"card-title-divider\"/>\n          <p>No players yet, be quick to be the first!</p>\n        </Card>)\n    }\n  }\n\n  renderBody() {\n    const { account, walletInitialized } = this.state;\n    if (!walletInitialized) {\n      return null;\n    } else {\n      if (account) {\n        return (\n          <div className=\"main-container\">\n            {this.renderPlayers()}\n            {this.renderBuy()}\n            {this.renderContractInfo()}\n          </div>\n        );\n      } else {\n        return (\n          <h2>Please sign in Qtum Light Wallet and refresh the page!</h2>\n        )\n      }\n    }\n  }\n\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <div className=\"App\">\n          {this.renderAppBar()}\n          {this.renderSummary()}\n          {this.renderBody()}\n          {this.renderLoading()}\n          {this.renderSnackbar()}\n          {this.renderFooter()}\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/qtum-raffle.55e6f7c8.svg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}